{"version":3,"file":"moment.umd.min.js","sources":["~/@mat-datetimepicker/moment/src/adapter/moment-datetime-adapter.ts","~/@mat-datetimepicker/moment/src/adapter/moment-datetime-formats.ts","~/@mat-datetimepicker/moment/src/adapter/index.ts"],"sourcesContent":["import {\n  Inject,\n  Injectable,\n  Optional\n} from '@angular/core';\nimport {\n  DateAdapter,\n  MAT_DATE_LOCALE\n} from '@angular/material';\nimport { DatetimeAdapter } from '@mat-datetimepicker/core';\n\n// import * as moment from \"moment\";\n// import { Moment } from \"moment\";\n// can't get this to build... ><\n\nimport * as _moment from 'moment';\nimport {\n  default as _rollupMoment,\n  Moment\n} from 'moment';\n\nconst /** @type {?} */ moment = _rollupMoment || _moment;\n/**\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\nexport class MomentDatetimeAdapter extends DatetimeAdapter<Moment> {\nprivate _localeData: {\n    firstDayOfWeek: number,\n    longMonths: string[],\n    shortMonths: string[],\n    dates: string[],\n    hours: string[],\n    minutes: string[],\n    longDaysOfWeek: string[],\n    shortDaysOfWeek: string[],\n    narrowDaysOfWeek: string[]\n  };\n/**\n * @param {?} matDateLocale\n * @param {?} _delegate\n */\nconstructor(  matDateLocale: string, _delegate: DateAdapter<Moment>) {\n    super(_delegate);\n    this.setLocale(matDateLocale || moment.locale());\n  }\n/**\n * @param {?} locale\n * @return {?}\n */\nsetLocale(locale: string) {\n    super.setLocale(locale);\n\n    const /** @type {?} */ momentLocaleData = moment.localeData(locale);\n    this._localeData = {\n      firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n      longMonths: momentLocaleData.months(),\n      shortMonths: momentLocaleData.monthsShort(),\n      dates: range(31, (i) => super.createDate(2017, 0, i + 1).format(\"D\")),\n      hours: range(24, (i) => this.createDatetime(2017, 0, 1, i, 0).format(\"H\")),\n      minutes: range(60, (i) => this.createDatetime(2017, 0, 1, 1, i).format(\"m\")),\n      longDaysOfWeek: momentLocaleData.weekdays(),\n      shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n      narrowDaysOfWeek: momentLocaleData.weekdaysMin()\n    };\n  }\n/**\n * @param {?} date\n * @return {?}\n */\npublic getHour(date: Moment): number {\n    return super.clone(date).hour();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\npublic getMinute(date: Moment): number {\n    return super.clone(date).minute();\n  }\n/**\n * @param {?} startDate\n * @param {?} endDate\n * @return {?}\n */\npublic isInNextMonth(startDate: Moment, endDate: Moment): boolean {\n    const /** @type {?} */ nextMonth = this.getDateInNextMonth(startDate);\n    return super.sameMonthAndYear(nextMonth, endDate);\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @param {?} hour\n * @param {?} minute\n * @return {?}\n */\npublic createDatetime(year: number, month: number, date: number, hour: number, minute: number): Moment {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    if (hour < 0 || hour > 23) {\n      throw Error(`Invalid hour \"${hour}\". Hour has to be between 0 and 23.`);\n    }\n\n    if (minute < 0 || minute > 59) {\n      throw Error(`Invalid minute \"${minute}\". Minute has to be between 0 and 59.`);\n    }\n\n    // const result = moment({year, month, date, hour, minute}).locale(this.locale);\n    const /** @type {?} */ result = moment({year, month, date, hour, minute});\n\n    // If the result isn't valid, the date must have been out of bounds for this month.\n    if (!result.isValid()) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nprivate getDateInNextMonth(date: Moment) {\n    return super.clone(date).date(1).add({month: 1});\n  }\n/**\n * @param {?} date\n * @return {?}\n */\npublic getFirstDateOfMonth(date: Moment): Moment {\n    return super.clone(date).startOf(\"month\");\n  }\n/**\n * @return {?}\n */\npublic getHourNames(): string[] {\n    return this._localeData.hours;\n  }\n/**\n * @return {?}\n */\npublic getMinuteNames(): string[] {\n    return this._localeData.minutes;\n  }\n/**\n * @param {?} date\n * @param {?} hours\n * @return {?}\n */\npublic addCalendarHours(date: Moment, hours: number): Moment {\n    return super.clone(date).add({hours});\n  }\n/**\n * @param {?} date\n * @param {?} minutes\n * @return {?}\n */\npublic addCalendarMinutes(date: Moment, minutes: number): Moment {\n    return super.clone(date).add({minutes});\n  }\n/**\n * @param {?} value\n * @return {?}\n */\npublic deserialize(value: any): Moment | null {\n     return this._delegate.deserialize(value);\n   }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE, ] }, ]},\n{type: DateAdapter, },\n];\n}\n\nfunction MomentDatetimeAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nMomentDatetimeAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMomentDatetimeAdapter.ctorParameters;\n/** @type {?} */\nMomentDatetimeAdapter.prototype._localeData;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { MatDatetimeFormats } from '@mat-datetimepicker/core';\n\nexport const /** @type {?} */ MAT_MOMENT_DATETIME_FORMATS: MatDatetimeFormats = {\n  parse: {\n    dateInput: \"l\"\n  },\n  display: {\n    dateInput: \"l\",\n    monthInput: \"MMMM\",\n    datetimeInput: \"L LT\",\n    timeInput: \"LT\",\n    monthYearLabel: \"MMM YYYY\",\n    dateA11yLabel: \"LL\",\n    monthYearA11yLabel: \"MMMM YYYY\"\n  }\n};\n","import { NgModule } from '@angular/core';\nimport {\n  MatMomentDateModule,\n  MomentDateModule\n} from '@angular/material-moment-adapter';\nimport {\n  MAT_DATETIME_FORMATS,\n  DatetimeAdapter\n} from '@mat-datetimepicker/core';\nimport { MomentDatetimeAdapter } from './moment-datetime-adapter';\nimport { MAT_MOMENT_DATETIME_FORMATS } from './moment-datetime-formats';\n\nexport {MomentDatetimeAdapter} from './moment-datetime-adapter';\nexport {MAT_MOMENT_DATETIME_FORMATS} from './moment-datetime-formats';\nexport class MomentDatetimeModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MomentDateModule],\n  providers: [\n    {\n      provide: DatetimeAdapter,\n      useClass: MomentDatetimeAdapter\n    }\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MomentDatetimeModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMomentDatetimeModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMomentDatetimeModule.ctorParameters;\n}\n\nexport class MatMomentDatetimeModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MomentDatetimeModule, MatMomentDateModule],\n  providers: [{provide: MAT_DATETIME_FORMATS, useValue: MAT_MOMENT_DATETIME_FORMATS}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatMomentDatetimeModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatMomentDatetimeModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatMomentDatetimeModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["range","length","valueFunction","valuesArray","Array","i","moment","_rollupMoment","_moment","MomentDatetimeAdapter","_super","matDateLocale","_delegate","_this","call","this","setLocale","locale","__extends","prototype","momentLocaleData","localeData","_localeData","firstDayOfWeek","longMonths","months","shortMonths","monthsShort","dates","createDate","format","hours","createDatetime","minutes","longDaysOfWeek","weekdays","shortDaysOfWeek","weekdaysShort","narrowDaysOfWeek","weekdaysMin","getHour","date","clone","hour","getMinute","minute","isInNextMonth","startDate","endDate","nextMonth","getDateInNextMonth","sameMonthAndYear","year","month","Error","result","isValid","add","getFirstDateOfMonth","startOf","getHourNames","getMinuteNames","addCalendarHours","addCalendarMinutes","deserialize","value","DatetimeAdapter","decorators","type","Injectable","ctorParameters","undefined","Optional","Inject","args","MAT_DATE_LOCALE","DateAdapter","MAT_MOMENT_DATETIME_FORMATS","parse","dateInput","display","monthInput","datetimeInput","timeInput","monthYearLabel","dateA11yLabel","monthYearA11yLabel","MomentDatetimeModule","NgModule","imports","MomentDateModule","providers","provide","useClass","MatMomentDatetimeModule","MatMomentDateModule","MAT_DATETIME_FORMATS","useValue"],"mappings":"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"}
